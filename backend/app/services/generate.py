# backend/app/services/generate.py

import os

from collections import defaultdict
from openai import OpenAI
from openai.types.chat.chat_completion import ChatCompletion
from pandas import DataFrame
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer
from typing import Dict, List, Tuple


def generate_topics(df: DataFrame) -> DataFrame:
  sentences: List[str] = df['Sentence'].tolist()
  clusters: List[int] = df['Cluster'].tolist()

  grouped_sentences = defaultdict(list)
  for sentence, cluster in zip(sentences, clusters):
    grouped_sentences[cluster].append(sentence)

  vectorizer: CountVectorizer = CountVectorizer(stop_words='english')
  transformer: TfidfTransformer = TfidfTransformer()

  topics: Dict = {}
  for cluster, sentences in grouped_sentences.items():
    X = vectorizer.fit_transform(sentences)
    tfidf_matrix = transformer.fit_transform(X)
    feature_names = vectorizer.get_feature_names_out()

    sorted_indices = tfidf_matrix.toarray().sum(axis=0).argsort()[::-1]
    top_terms = [feature_names[i] for i in sorted_indices[:10]]
    topics[cluster] = '-'.join(top_terms)

  df['Topic'] = df['Cluster'].map(topics)

  return df


def finetune_topic_and_content(topic: str, content: str) -> Tuple[str, str]:
  prompt: str = (
  	f"The following is a cluster of similar sentences extracted from a document:\n{content}\n\n"
		f"The title generated by topic modeling is: {topic}\n\n"
  	f"Please generate a more detailed and refined topic, and then write an enhanced content summary based on this information.\n\n"
   	f"It is of utmost importance that you don't generate content in markdown format. You have to generate raw text.\n"
  	f"Format your response as follows:\n"
  	f"Topic: <Your generated topic>\n"
  	f"Content: <Your generated content>"
	)

  client: OpenAI = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

  response: ChatCompletion = client.chat.completions.create(
  	model="gpt-4o",
  	messages=[
    	{"role": "system", "content": "You are a helpful assistant."},
    	{"role": "user", "content": prompt}
  	],
  	max_tokens=1000,
  	temperature=0.7
	)

  generated_text: str = response.choices[0].message.content

  lines: List[str] = generated_text.split('\n')
  generated_topic: str = ""
  generated_content: str = ""

  for line in lines:
    if line.startswith("Topic:"):
      generated_topic = line[len("Topic: "):].strip()
    elif line.startswith("Content:"):
      generated_content = line[len("Content: "):].strip()

  return generated_topic, generated_content
