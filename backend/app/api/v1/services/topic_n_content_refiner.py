# %%
import os

from openai import OpenAI
from openai.types.chat.chat_completion import ChatCompletion

# %%
def refine_topic_n_content(
	topic: str,
	content: str
) -> str:
  """
  Refines the given topic and content using OpenAI models.

	Args:
		topic (str): The topic to refine.
		content (str): The content to refine.

	Returns:
		str: The refined content.
  """
  prompt: str = (
  	f"The following is a cluster of similar sentences extracted from a document:\n{content}\n\n"
		f"The title generated by topic modeling is: {topic}\n\n"
  	f"Please generate a more detailed and refined topic, and then write an enhanced content summary based on this information.\n\n"
   	f"It is of utmost importance that you generate content in markdown format and that you don't prefix neither the topic nor the content with tags like `Topic: ` or `Content: `.\n"
	)

  client: OpenAI = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

  response: ChatCompletion = client.chat.completions.create(
    model="gpt-4o",
  	messages=[
    	{"role": "system", "content": "You are a helpful assistant."},
    	{"role": "user", "content": prompt}
  	],
  	max_tokens=1000,
  	temperature=0.7
	)

  return response.choices[0].message.content
